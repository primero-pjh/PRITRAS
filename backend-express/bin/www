#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http2 = require('http2');
const fs = require('fs');
const chalk = require('chalk');
const jwtFunc = require('../jwt');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http2.createSecureServer({
    key: fs.readFileSync("./config/localhost-private.pem"),
    cert: fs.readFileSync("./config/localhost-cert.pem"),
    // requestCert: true,
    // allowHTTP1: true,
}, app);

server.on('error', function (err) {
    try {
        console.log("=======")
        console.log(err);
    } catch (error) {
        console.log(error);
    }
});
const io = require("socket.io")(server, {
    // rejectUnauthorized: false,
	cors: { 
        origin: '*',
    }
});
io.attach(server);
io.use((socket, next) => {
	let token = socket.handshake.auth.token;
	if(token) {
		jwtFunc.verify(token).then((res) => {
			if(!res) {
				socket.emit('/error', {
					message: '로그인 토큰 만료!\n'
				});
			}
		});
		next(); // 이상이 없는 경우 end-point로 이동한다.
	} else {
		console.error('\u001b[41m', 'jwt token error', '\x1b[40m');
		socket.emit('/error', {
			message: '로그인 토큰 만료!\n'
		});
		next(); // 잘못된 데이터로 error를 반환한다.
	}
});
io.on('connection', (socket) => {
    // console.log(socket);
    socket.on("details", (data) => {
        console.log(data);
    });
    try {
        console.log(chalk.yellow.bgRed.bold(`socketId: ${socket.id}`)); 
        socket.emit('/client/connection', {
            success: 1,
            message: '로그인 성공',
        });
        socket.on("disconnect", async (data) => {
            console.log(chalk.yellow.bgRed.bold('disconnect:', socket.id));
            socket.disconnect();
        });
        socket.on('error', (err)=> {
            try {
                console.log("=======")
                console.log(err);
            } catch (error) {
                console.log(error);
            }
        })
    } catch(err) {
        console.log("err:", err);
    }
});
server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;
    console.log(error.code);
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    let addr = server.address();
    console.log(`PRIRRAS server is listening on ${addr.port}`);
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
